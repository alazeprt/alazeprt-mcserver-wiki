import{_ as o,c as a,o as d,a0 as r}from"./chunks/framework.3qbvnJ7B.js";const u=JSON.parse('{"title":"Velocity 服务端配置文件","description":"","frontmatter":{},"headers":[],"relativePath":"config-file/velocity.md","filePath":"config-file/velocity.md"}'),c={name:"config-file/velocity.md"};function n(l,e,t,i,p,s){return d(),a("div",null,e[0]||(e[0]=[r('<h1 id="velocity-服务端配置文件" tabindex="-1">Velocity 服务端配置文件 <a class="header-anchor" href="#velocity-服务端配置文件" aria-label="Permalink to &quot;Velocity 服务端配置文件&quot;">​</a></h1><p>Velocity 服务端的配置文件一般是服务器根目录下的 <code>velocity.toml</code> 文件, 让我们一起看看该服务端的常用配置项:</p><h2 id="bind" tabindex="-1">bind <a class="header-anchor" href="#bind" aria-label="Permalink to &quot;bind&quot;">​</a></h2><p>类型: <code>string</code></p><p>默认值: <code>0.0.0.0:25565</code></p><p>Velocity 监听的地址和端口</p><h2 id="motd" tabindex="-1">motd <a class="header-anchor" href="#motd" aria-label="Permalink to &quot;motd&quot;">​</a></h2><p>类型: <code>string</code></p><p>默认值: <code>&lt;#09add3&gt;A Velocity Server</code></p><p>服务器的描述 (在服务器列表中显示), 支持 <a href="https://docs.advntr.dev/minimessage/format.html" target="_blank" rel="noreferrer">MiniMessage</a> 语法</p><h2 id="show-max-players" tabindex="-1">show-max-players <a class="header-anchor" href="#show-max-players" aria-label="Permalink to &quot;show-max-players&quot;">​</a></h2><p>类型: <code>int</code></p><p>默认值: <code>500</code></p><p>Velocity 服务端显示的最大玩家数量</p><h2 id="online-mode" tabindex="-1">online-mode <a class="header-anchor" href="#online-mode" aria-label="Permalink to &quot;online-mode&quot;">​</a></h2><p>类型: <code>boolean</code></p><p>默认值: <code>true</code></p><p>是否启用在线模式 (即正版服), 若你是离线服, 请设置为 <code>false</code></p><h2 id="player-info-forwarding-mode" tabindex="-1">player-info-forwarding-mode <a class="header-anchor" href="#player-info-forwarding-mode" aria-label="Permalink to &quot;player-info-forwarding-mode&quot;">​</a></h2><p>类型: <code>string</code></p><p>默认值: <code>none</code></p><p>Velocity 服务端的转发模式, 分为以下几种:</p><ul><li><code>none</code>: 直接转发, 该配置下不需要额外的子服配置, 但是 Velocity 插件及服务器之间互联配置的自由会受到限制</li><li><code>legacy</code>: 使用 BungeeCord 模式转发, 安全性相比 <code>modern</code> 模式较差</li><li><code>bungeeguard</code>: 基于 BungeeGuard 插件进行转发, 是 <code>legacy</code> 和 <code>modern</code> 两种模式的折中方案 (支持低版本, 安全性也不差)</li><li><code>modern</code>: 使用 Velocity 自身的现代转发模式, 安全性较高, 但是仅支持 1.13+ 的类 Paper 服务端</li></ul><h2 id="forwarding-secret-file" tabindex="-1">forwarding-secret-file <a class="header-anchor" href="#forwarding-secret-file" aria-label="Permalink to &quot;forwarding-secret-file&quot;">​</a></h2><p>类型: <code>string</code></p><p>默认值: <code>forwarding.secret</code></p><p>使用 <code>bungeeguard</code> 或 <code>modern</code> 转发模式时密钥的存储位置 (用于验证子服和代理服务端, 防止其它代理服务端连接到你的子服)</p><h2 id="announce-forge" tabindex="-1">announce-forge <a class="header-anchor" href="#announce-forge" aria-label="Permalink to &quot;announce-forge&quot;">​</a></h2><p>类型: <code>boolean</code></p><p>默认值: <code>false</code></p><p>用于与客户端通信, 告诉客户端子服是否支持 Forge, 如果有模组服子服, 建议设置为 <code>true</code></p><h2 id="enable-player-address-logging" tabindex="-1">enable-player-address-logging <a class="header-anchor" href="#enable-player-address-logging" aria-label="Permalink to &quot;enable-player-address-logging&quot;">​</a></h2><p>类型: <code>boolean</code></p><p>默认值: <code>true</code></p><p>是否记录玩家进入时的真实 IP 到日志中</p><h2 id="servers" tabindex="-1">servers <a class="header-anchor" href="#servers" aria-label="Permalink to &quot;servers&quot;">​</a></h2><p>类型: <code>object</code></p><p>默认值: <code>(代码块)</code></p><p>Velocity 的子服配置</p><h2 id="try" tabindex="-1">try <a class="header-anchor" href="#try" aria-label="Permalink to &quot;try&quot;">​</a></h2><p>类型: <code>array</code></p><p>默认值: <code>[&quot;lobby&quot;]</code></p><p>在玩家进入时, 尝试连接的子服名称列表, 若玩家退出时在a子服, 如果列表中有a子服, 则玩家重新进入时会到a子服, 如果没有则按照列表顺序尝试连接每一个子服 (哪一个子服成功了就连接哪一个), 若列表为空, 则随机连接一个子服</p><h2 id="advanced-haproxy-protocol" tabindex="-1">advanced.haproxy-protocol <a class="header-anchor" href="#advanced-haproxy-protocol" aria-label="Permalink to &quot;advanced.haproxy-protocol&quot;">​</a></h2><p>类型: <code>boolean</code></p><p>默认值: <code>false</code></p><p>是否支持 HAProxy Protocol 协议 (用于在内网穿透环境中将玩家真实IP转发到子服), 新手建议不要开启</p><h2 id="advanced-show-ping-requests" tabindex="-1">advanced.show-ping-requests <a class="header-anchor" href="#advanced-show-ping-requests" aria-label="Permalink to &quot;advanced.show-ping-requests&quot;">​</a></h2><p>类型: <code>boolean</code></p><p>默认值: <code>false</code></p><p>是否显示来自 Minecraft 客户端的 Ping 请求</p><h2 id="advanced-log-command-executions" tabindex="-1">advanced.log-command-executions <a class="header-anchor" href="#advanced-log-command-executions" aria-label="Permalink to &quot;advanced.log-command-executions&quot;">​</a></h2><p>类型: <code>boolean</code></p><p>默认值: <code>false</code></p><p>是否记录命令执行信息到日志中</p><h2 id="advenced-log-player-connections" tabindex="-1">advenced.log-player-connections <a class="header-anchor" href="#advenced-log-player-connections" aria-label="Permalink to &quot;advenced.log-player-connections&quot;">​</a></h2><p>类型: <code>boolean</code></p><p>默认值: <code>true</code></p><p>是否记录玩家连接信息到日志中</p>',59)]))}const f=o(c,[["render",n]]);export{u as __pageData,f as default};
