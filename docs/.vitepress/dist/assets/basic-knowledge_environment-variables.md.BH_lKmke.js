import{_ as a,c as o,o as s,a0 as n}from"./chunks/framework.CEeX5LuZ.js";const h=JSON.parse('{"title":"环境变量","description":"","frontmatter":{},"headers":[],"relativePath":"basic-knowledge/environment-variables.md","filePath":"basic-knowledge/environment-variables.md"}'),l={name:"basic-knowledge/environment-variables.md"};function i(d,e,t,r,c,p){return s(),o("div",null,e[0]||(e[0]=[n('<h1 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h1><p>相信这个词你也不少见了, 它指的是操作系统中用来存储配置信息的变量。</p><h2 id="和-和-和" tabindex="-1">. 和 .. 和 / 和 * <a class="header-anchor" href="#和-和-和" aria-label="Permalink to &quot;. 和 .. 和 / 和 *&quot;">​</a></h2><p>一般来说, <code>.</code> 代表当前目录, <code>..</code> 代表上一级目录, <code>*</code> 是一个通配符, 代表任意字符</p><p>在类 Unix 系统中, <code>/</code> 代表根目录</p><h2 id="绝对路径-相对路径" tabindex="-1">绝对路径 &amp; 相对路径 <a class="header-anchor" href="#绝对路径-相对路径" aria-label="Permalink to &quot;绝对路径 &amp; 相对路径&quot;">​</a></h2><p>假设你在一个命令行, 当前命令行的所在目录为: <code>/home/alazeprt</code>, 假设这个目录里有一个文件叫 <code>test.txt</code>, 那么它在命令行的表示可以为:</p><ul><li>相对路径: <code>./test.txt</code> (<code>.</code> 代表当前目录)</li><li>绝对路径: <code>/home/alazeprt/test.txt</code></li></ul><p>相对路径即相对于当前目录的路径, 而绝对路径则是从根目录开始的完整路径 (Windows 中的根目录是磁盘的盘符, 如 <code>C:/</code>)</p><h2 id="环境变量-path" tabindex="-1">环境变量 PATH <a class="header-anchor" href="#环境变量-path" aria-label="Permalink to &quot;环境变量 PATH&quot;">​</a></h2><p>在 PATH 中存储的是一系列目录的路径, 这些目录一般有许多可执行文件, 如 <code>java.exe</code>, 通过将这些目录存储到 PATH 中, 就可以在命令行通过输入执行文件名直接调用命令</p><p>例如, 某 <code>java.exe</code> 安装在 <code>C:/Program Files/Zulu/zulu-21/bin/java.exe</code>, 原来在命令行中要通过:</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">&quot;C:/Program Files/Zulu/zulu-21/bin/java.exe&quot;</span><span style="color:#C3E88D;"> -version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>才能查看 Java 版本 (调用 Java 程序查询)</p><p>而把它加到环境变量中, 就可以直接通过:</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">java</span><span style="color:#C3E88D;"> -version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>来查看 Java 版本</p><h3 id="在-windows-中设置环境变量" tabindex="-1">在 Windows 中设置环境变量 <a class="header-anchor" href="#在-windows-中设置环境变量" aria-label="Permalink to &quot;在 Windows 中设置环境变量&quot;">​</a></h3><p>在 Windows 中, 可以在搜索栏中直接搜索 <code>编辑系统环境变量</code> 后打开然后点击右下方的 <code>环境变量</code> 就可以打开编辑环境变量的页面</p><p>在 <code>系统变量</code> 部分找到 <code>Path</code> 变量, 双击打开编辑页面, 点击 <code>新建</code> 后点击 <code>浏览</code>, 选择你可执行文件所在的目录 (如 <code>C:/Program Files/Zulu/zulu-21/bin/</code>, <strong>切忌</strong>直接选择可执行文件), 接着在每个页面都点击确定, 就添加完成了</p><h3 id="在-linux-中设置环境变量" tabindex="-1">在 Linux 中设置环境变量 <a class="header-anchor" href="#在-linux-中设置环境变量" aria-label="Permalink to &quot;在 Linux 中设置环境变量&quot;">​</a></h3><p>在 Linux 中, 可以通过以下命令编辑环境变量:</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#BABED8;"> PATH</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">$PATH:/可执行文件所在目录 // $PATH 代表原来的 PATH 环境变量的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该命令仅在当前命令行中生效 (临时生效), 若想让环境变量永久生效, 需要修改 <code>~/.bashrc</code> 文件, 在其中添加上述命令, 然后运行 <code>source ~/.bashrc</code> 命令使其生效</p><h2 id="环境变量的优先级" tabindex="-1">环境变量的优先级 <a class="header-anchor" href="#环境变量的优先级" aria-label="Permalink to &quot;环境变量的优先级&quot;">​</a></h2><p>在 Windows 中, 越上面的优先级越高, 如果有冲突的可执行文件会优先执行上面的</p><p>在 Linux 中, 越前面的优先级越高, 与 Windows 同理</p>',27)]))}const b=a(l,[["render",i]]);export{h as __pageData,b as default};
